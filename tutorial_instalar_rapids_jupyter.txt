


* COMANDO PARA VERIFICAR NO POWERSHELL A VERSAO DA BUILD DO WINDOWS10.

	>> [System.Enviroment]::OSVersion.Version

Caso a Build for menor que 19044 é necessário atualizar o windows utilizando o update assistant.

============================================================================================================

Acessar  site da rapids e seguir as instruções:

	https://rapids.ai/start.html

		ou

Para uso local eu instalei seguindo esses passos:

1. Instalar o WSL2 (Windows subsystem for Linux) no Windows10 executando como administrador no PowerShell o seguinte comando:

	>> wsl --install

		ou

	>> wsl --list --online

Ex: wsl --install -d <DistroName>

	>> wsl --install -d Ubuntu


1.1 Quando terminar a instalação do WSL2 e do Ubuntu Reiniciar o COMPUTADOR


2. Instalar os drives da NVIDIA:

	https://www.nvidia.com/download/index.aspx

3. Para abrir o console do UBUNTU que foi instalado digitar UBUNTU na caixa de pesquisa do windows.

4. Executar no console do UBUNTU esses dois comandos, um de cada vez para instalar o CONDA (gerenciador de pacotes do anaconda que é um ambiente de desenvolvimento python). O primeiro comando faz o download do bash de instalação do miniconda. O segundo comando executa o bash baixado.:

	>> wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh

	>> bash Miniconda3-latest-Linux-x86_64.sh

4.1 Responda yes pra tudo.

4.2 Quando terminar a instalação do CONDA, Reinicie o console do UBUNTU.

4.3 Faça update do Conda:

	>> conda update conda

4.4 Reinicie o console do UBUNTU.


5. Instalar o rapids usando instruções da nvidia no site https://rapids.ai/start.html#get-rapids. Executar o comando gerado no console Linux(UBUNTU). Eu usei a seguinte configuração(demora 15 minutos dependendo da velocidade da internet):

	>> conda create -n rapids-22.10 -c rapidsai -c nvidia -c conda-forge  \
    rapids=22.10 python=3.9 cudatoolkit=11.5 \
    jupyterlab


5.1 Se der erro remova os pacotes criados e instale de novo >> conda clean -a

5.2 Se a instalação do Rapids for concluida com sucesso irá aparecer uma mensagem parecida com essa:

	done
	#
	# To activate this environment, usey
	#
	#     $ conda activate rapids-22.10
	#
	# To deactivate an active environment, use
	#
	#     $ conda deactivate

5.3 Quando terminar a instalação do rapids ative o ambiente rapids: 

	>> conda activate rapids-22.10

6. Instalar o pacote nb_conda e linkar o ambiente do conda no notebook jupyter usando dois comandos:

	>> conda install nb_conda

	>> python -m ipykernel install --user --name rapids-22.10 --display-name "Python 3.9 (mauricio_rapids-22.10)"




7. Iniciar o servidor jupyter no linux(Este passo deve ser feito sempre que religar o PC).
   O argumento --no-browser é porque ele não consegue abrir o browser do windows a partir do linux.:



	>> jupyter notebook --no-browser 

			OU

	>> jupyter notebook --no-browser --allow-root



8. Abrir um Browser qualquer no Windows e acessar a pagina do jupyter no endereço indicado na tela do console Linux.(substitua o token pelo seu):

	>>  http://localhost:8888/?token=e6b541feaaa3c5b5e6799f6f0f2b8d7503a23debc2bff6d6

Dica: Para acessar o sistema de arquivos do linux a partir do Windows digite o comando(não esqueça o ponto no final):

	>> explorer.exe .

Ou acesse direto no windows explorer na barra de endereço:

	\\wsl$

Tutoriais e exemplos de utilização do Rapids machine learning:

	git clone https://github.com/rapidsai-community/notebooks-contrib.git


Editar arquivo .bashrc para automatizar a ativacao do ambiente rapids-20.10 e a inicialização do servidor jupyter:

	>> nano ~/.bashrc

adicionar essas Linhas no final do arquivo .bashrc:

        
        >> rclone sync /home/mhmatsumura/miniconda3/CIENCIA_DE_DADOS meu_gdrive:/CIENCIA_DE_DADOS_GDRIVE #SINCRONIZAR A PASTA LOCAL NO GOOGGLE DRIVE
	>> conda activate rapids-22.10
	>> jupyter notebook --no-browser 

			OU

	>> jupyter notebook --no-browser --allow-root

#comando para kill o processo na gpu pelo pid
 	>> nvidia-smi | grep 'python' | awk '{ print $3 }' | xargs -n1 kill -9

#comando para resetar a gpu
	>> sudo nvidia-smi -r
	
================== cria ambiente python no conda sem rapids  ======================

conda create -n meu_python_3.10.8 -c conda-forge python=3.10
conda activate meu_python_3.10.8
python -m ipykernel install --user --name meu_python_3.10.8 --display-name "meu_python_3.10.8"

===================================================================================

==============================================================
	RCLONE PARA FAZER BACKUP NO GOOGLE DRIVE
==============================================================

==== PARA INSTALAR RCLONE QUANDO APT FALHAR ====

colar no arquivo etc/apt/source.list a linha abaixo:

deb http://packages.azlux.fr/debian/ testing main

executar:

sudo apt update
sudo apt-get update

instalar rclone:

sudo apt install rclone

==== CONFIGURAR O RCLONE ====

https://ostechnix.com/install-rclone-in-linux/

==== SINCRONIZAR A PASTA LOCAL NO GOOGGLE DRIVE =====

rclone sync /home/mhmatsumura/miniconda3/CIENCIA_DE_DADOS meu_gdrive:/CIENCIA_DE_DADOS_GDRIVE

===============================================================

#comandos

	nvidia-smi
	nvcc --version
	conda info --envs
	conda env list
	conda deactivate
	conda env remove -n rapids-22.10
	find / -type d -name cuda 2>/dev/null
	jupyter kernelspec list
	jupyter kernelspec uninstall unwanted-kernel
	ubuntu -> botao direito mouse -> configurações do aplicativo -> restaurar (reinstala ubuntu, reseta tudo, CUIDADO!!! FAZER BACKUP DAS PASTAS DO NOTEBOOK!!!)

CRIAR ENVIROMENT E INSTALAR CONDA,CUDNN E TENSORFLOW  (para deep learning):

====================== INSTALAÇÃO DO TENSORFLOW ===================================

	conda create -n tf_gpu -c conda-forge  \
        python=3.9 cudatoolkit=11.2 cudnn=8.1.0

	conda activate tf_gpu 
	
	mkdir -p $CONDA_PREFIX/etc/conda/activate.d
	echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/' > $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh

	pip install --upgrade pip

	pip install tensorflow==2.9 

====================== INSTALAÇÃO DO TENSORRT (opcional, melhora desempenho) ===================================

	pip install tensorrt 

====================== INSTALAÇÃO DO SCIKERAS, SCIKIT-LEARN (scikeras faz o link do gridsearch com tensorflow) ===================================


	pip install scikit-learn==1.1.3 (se não for essa versão da conflito)
	pip install scikeras
	pip install pandas

====================== INSTALAÇÃO DO NOTEBOOK JUPYTER E CRIAÇÃO DO KERNEL ===================================
	
	conda install nb_conda
	python -m ipykernel install --user --name tf_gpu --display-name "tensorflow_gpu"

============================== COPIAR ARQUIVO LIBDEVICE PARA RAIZ DO NOTEBOOK =====================================================================

 ===>>> NO MINICONDA NAO PRECISA DO DLL SOMENTE O LIBDEVICE NA RAIZ JÁ RESOLVE

On Windows 10, with Anaconda and CUDA installed by "conda install -c conda-forge cudatoolkit=11.2"

In the root of your python project create the directory "nvvm" and "nvvm/libdevice"

From "C:\Users<user_name>\anaconda3\pkgs\cudatoolkit-11.2.2-h933977f_10\DLLs" copy the files libdevice.10.bc and nvvm64_40_0.dll" to the subdirectory "libdevice" created following the point one.
It works

==================================================================================================================
